import requests 
import discord
import random
from model import get_class
import os, random
import requests
from discord.ext import commands

intents = discord.Intents.default()
intents.message_content = True

bot = commands.Bot(command_prefix='$', intents=intents)

@bot.event
async def on_ready():
    print(f"We have logged in as {bot.user}")

@bot.command()
async def hello(ctx):
    await ctx.send(f"Saludos, soy {bot.user}. ¬°Bienvenido al servidor! üåëüîÆ")
    
@bot.command()
async def bye(ctx):
    await ctx.send(f'Hasta luego :v')

@bot.command()
async def heh(ctx, count_heh = 5):
    await ctx.send("he" * count_heh)
 
@bot.command()
async def admin(ctx, *, message):
    await ctx.message.delete()
    await ctx.send(message)
    
@bot.command()
async def repetir(ctx, *, content):
    await ctx.send(content)

@bot.command()
async def reglas(ctx):
    reglas = [
        "1. Se respetuoso, esta es una comunidad.",
        "2. Manten seguridad y no compartas informacion personal",
        "3. Mantener los debates y conversaciones en un tono respetuoso.",
        "4. No compartir contenido inapropiado .",
        "5. No hacer spam de contenido o imagenes.",
        "6. Utilizar los canales adecuados para cada tipo de contenido.",
        "Recuerda que infrigir en estos aspectos puede generar una sancion :)",
    ]
    
    mensaje = "Reglas del servidor:\n\n" + "\n".join(reglas)
    await ctx.send(mensaje)

@bot.command()
async def borrar(ctx, cantidad: int):
    await ctx.channel.purge(limit=cantidad + 1)
    
@bot.command()
async def helplease(ctx):
    lista = [
        "$hello: Te da la bienvenida el bot.",
        "$heh: Repite por cinco veces el texto que escribas.",
        "$admin: El bot escribe un mensaje en tu nombre.",
        "$repetir: Repite el mensaje que escribas.",
        "$reglas: Muestra la lista de reglas del servidor.",
        "$helplease: Muestra la lista actual de c√≥digos existentes en el servidor.",
        "$mensaje: Ofrece un saludo de hola diferente.",
        "$borrar: Introduce el n√∫mero de mensajes que deseas eliminar.",
        "$fondo: Proporciona imagenes funcionales de fondo de pantalla",
        "$tokio: Recomienda animes e imagenes random",
        "$mem: Genera fotos de memes de acuerdo a la programacion",
        "$duck: Genera imagenes de patos, adorable, no lo crees?",
        "$adios: Ofrece una despedida diferente",
        "$naturaleza: Ofrece una lista de naturaleza",
        "$python: Envia codigos utilizables basicos",
        "$videojuegos: Seccion acerca de los videojuegos",
        "$fox: Seccion acerca de los zorros",
        "$dog: Seccion que envia imagenes de dog",
        "$contaminacion: El usuario podra interactuar con la ecologia",
        "Puedes utilizar estos comandos seg√∫n tus necesidades.",
        ]
    mensaje = "Facilidades del bot!:\n\n" + "\n".join(lista)
    await ctx.send(mensaje)

@bot.command()
async def mensaje(ctx):
    holas = [
         "Hola!", 
         "Hola", 
         "Hola, ¬øc√≥mo est√°s?",
         "!Hola, ¬øqu√© tal?!",
         "!Hola, bienvenido!",
         "Hola, ¬øc√≥mo te encuentras?",
        ]
    await ctx.send(random.choice(holas))

@bot.command()
async def adios(ctx):
    adios = [
        "¬°Hasta luego!",
        "¬°Adi√≥s!",
        "¬°Nos vemos pronto!",
        "¬°Que tengas un buen d√≠a!",
        "¬°Hasta la pr√≥xima!",
        "¬°Adi√≥s, amigo!",
    ]
    await ctx.send(random.choice(adios))
  
def get_anime_image_url():    
    url = 'https://kitsu.io/api/edge/anime?filter[text]=tokyo'
    res = requests.get(url)
    data = res.json()
    animerandom = random.choice(data['data'])
    return animerandom['attributes']['posterImage']['small']

@bot.command()
async def tokio(ctx):
    image_url = get_anime_image_url()
    await ctx.send(image_url)
    

def get_duck_image_url():    
    url = 'https://random-d.uk/api/random'
    res = requests.get(url)
    data = res.json()
    return data['url']


@bot.command('duck')
async def duck(ctx):
    image_url = get_duck_image_url()
    await ctx.send(image_url)

def get_fox_image_url():    
    url = 'https://randomfox.ca/floof/'
    res = requests.get(url)
    data = res.json()
    return data['image']


@bot.command('fox')
async def fox(ctx):
    image_url = get_fox_image_url()
    await ctx.send(image_url)
    
def get_dog_image_url():    
    url = 'https://random.dog/woof.json'
    res = requests.get(url)
    data = res.json()
    return data['url']


@bot.command('dog')
async def dog(ctx):
    image_url = get_dog_image_url()
    await ctx.send(image_url)

      
@bot.command()
async def creator(ctx):
    funciones = [
        ("on_ready", "Se ejecuta cuando el bot se ha conectado correctamente a Discord."),
        ("hello", "Saluda al usuario."),
        ("bye", "Se despide del usuario."),
        ("heh", "Repite la palabra 'he' varias veces."),
        ("admin", "Permite al bot enviar un mensaje en nombre del usuario y borra el mensaje original."),
        ("repetir", "Repite un mensaje."),
        ("reglas", "Muestra las reglas del servidor."),
        ("borrar", "Borra mensajes en el canal."),
        ("helplease", "Muestra una lista de comandos disponibles."),
        ("mensaje", "Env√≠a un saludo aleatorio."),
        ("adios", "Se despide de manera aleatoria."),
        ("mem", "Env√≠a una imagen de meme aleatoria."),
        ("tokio", "Recomienda un anime de Tokio."),
        ("duck", "Env√≠a una imagen aleatoria de un pato."),
        ("fox", "Env√≠a una imagen aleatoria de un zorro."),
        ("dog", "Env√≠a una imagen aleatoria de un perro.")
    ]
    mensaje = "Funciones utilizadas por el creador:\n\n" + "\n".join([f"{funcion}: {descripcion}" for funcion, descripcion in funciones])
    await ctx.send(mensaje)
    
    
    
@bot.command()
async def naturaleza(ctx):
    naturaleza = [
        "$historias: Sum√©rgete en la historia de la naturaleza y la Tierra.",
        "$curiosidades: Descubre datos curiosos sobre el mundo natural.",
    ]
    
    Naturaleza = "Comandos relacionados con la naturaleza:\n\n" + "\n".join(naturaleza)
    await ctx.send(Naturaleza)
    
@bot.command()
async def curiosidades(ctx):
    curiosidades = [
        "1. √Årboles y sus caracter√≠sticas:",
        "Los √°rboles son seres vivos que forman parte del Reino Plantae.",
        "Tienen un tronco lignificado o le√±oso, m√°s duro y grueso que los arbustos.",
        "2. Tipos de √°rboles:",
        "√Årboles de hoja caduca: Pierden sus hojas en oto√±o.",
        "√Årboles de hoja perenne: Mantienen sus hojas durante todo el a√±o.",
        "3.Partes de un √°rbol:",
        "Ra√≠ces: Absorben agua y nutrientes del suelo.",
        "Tronco: Soporte principal del √°rbol.",
        "Ramas y hojas: Realizan la fotos√≠ntesis y producen ox√≠geno.",
    ]
    
    arbol = "Informaci√≥n sobre plantas y √°rboles:\n\n" + "\n".join(curiosidades)
    await ctx.send(arbol)
    
@bot.command()
async def historias(ctx):

    historianatural = [
    "Plinio el Viejo y la Naturalis Historia:",
    "Plinio el Viejo escribi√≥ Naturalis Historia en el a√±o 77 d.C.",
    "Esta obra abarcaba zoolog√≠a, bot√°nica, agricultura, mineralog√≠a, medicina y magia.",
    "La Tierra y su historia:",
    "La Tierra es el quinto mayor planeta del sistema solar y el √∫nico lugar donde existe vida.",
    "Los patrones clim√°ticos var√≠an desde los polos hasta las zonas ecuatoriales.",
    "La evoluci√≥n de la historia natural:",
    "Desde los antiguos griegos hasta los naturalistas del siglo XVIII.",
    "El concepto de historia natural incluye minerales, vegetales, animales y procesos geol√≥gicos.",
    ]

    listahistoria = "Informaci√≥n sobre plantas y √°rboles:\n\n" + "\n".join(historianatural)
    await ctx.send(listahistoria)

    


@bot.command()
async def videojuegos(ctx):
    lista_videojuegos = [
        "$recomendar: Sugiere t√≠tulos de videojuegos populares.",
        "$personajes: Describe a tus personajes favoritos de videojuegos.",
        "$historia: Sum√©rgete en la historia de los videojuegos.",
        "$curiosidades: Descubre datos interesantes sobre la cultura gamer.",
    ]
    
    videojuegos = "Comandos relacionados con videojuegos:\n\n" + "\n".join(lista_videojuegos)
    await ctx.send(videojuegos)
    
@bot.command()
async def recomendar(ctx):
    recomendaciones = [
        "Apex Legends: Genero: Battle Royale.",
        "Dark Souls: Genero: Aventura, RPG.",
        "Stardew Valley: Genero: Simulacion, RPG.",
        "Celeste: Genero: Plataformas, aventura.",
        "Hollow Knight: Aventura, accion.",
    ]
    recomendar= "Comandos relacionados con videojuegos:\n\n" + "\n".join(recomendaciones)
    await ctx.send(recomendar)
    
@bot.command()
async def historia(ctx):
    history = [
        "1.Pong (1972): Uno de los primeros videojuegos comerciales, creado por Atari.",
        "2.Space Invaders(1978): Revolucion√≥ los juegos de disparos y marc√≥ el inicio de la era de las m√°quinas arcade.",
        "3.Pac-Man(1980): El ic√≥nico comecocos amarillo que se convirti√≥ en un fen√≥meno cultural.",
        "4.Donkey Kong(1981): Introdujo a Mario (entonces llamado Jumpman) y sent√≥ las bases para los juegos de plataformas.",
        "5.Tetris(1984): El adictivo juego de bloques que se ha adaptado a casi todas las plataformas imaginables.",
        "6.Super Mario Bros. (1985): El juego que catapult√≥ a Mario a la fama y defini√≥ los juegos de plataformas.",
        "7.The Legend of Zelda (1986): La primera entrega de la √©pica saga de aventuras de Link y Zelda.",
        "8.Sonic the Hedgehog (1991): El veloz erizo azul de SEGA que compiti√≥ con Mario.",
        "9.Street Fighter II (1991): Populariz√≥ los juegos de lucha y present√≥ personajes como Ryu y Chun-Li.",
        "10.Doom (1993): Pionero en los juegos de disparos en primera persona y precursor de los juegos de acci√≥n 3D.",
    ]
    
    history1= "Interesante, lo que solemos jugar ahora:\n\n" + "\n".join(history)
    await ctx.send(history1)
    
@bot.command()
async def personajes(ctx):
    personaje = [
        "Samus Aran.",
        "PAC-MAN",
        "Kratos.",
        "Mario.",
        "Cloud Strife.",
        "Solid Snake",
    ]
    person= "Mejores personajes ranking:\n\n" + "\n".join(personaje)
    await ctx.send(person)
    
@bot.command()
async def curiosidades0(ctx):
    curiosidad = [
        "Spacewar, creado en tan solo 200 horas en 1961, fue el primer videojuego en el que se pod√≠a disparar.",
        "Call of Duty: Modern Warfare 2 obtuvo la mayor recaudaci√≥n en su primer d√≠a de lanzamiento, con 410 millones de d√≥lares.",
        "En 2019, se determin√≥ que exist√≠an poco m√°s de un mill√≥n de videojuegos en total.",
        "La m√°quina recreativa m√°s grande tiene dimensiones de m√°s de 4 metros de alto y casi 2 metros de ancho.",
        "El primer trabajo en el que vimos a Mario no fue como fontanero, sino como carpintero en el juego Donkey Kong.",
        "Se dice que existe un juego arcade llamado Polybius que es extremadamente misterioso. No se conserva ninguna copia de √©l, y se rumorea que causaba efectos extra√±os en quienes lo jugaban.",
    ]
    mensaje = "Curiosidades:\n\n" + "\n".join(curiosidad)
    await ctx.send(mensaje)
    

@bot.command()
async def python(ctx):
    lista_python = [
        "pip: Instala paquetes de software desde el √≠ndice de paquetes de Python.",
        "print: Muestra un mensaje en la pantalla o en otro dispositivo de salida est√°ndar.",
        "type: Verifica el tipo o clase de un objeto.",
        "range: Genera una secuencia de enteros desde 0 hasta n (no incluido).",
        "len: Devuelve la longitud (cantidad de elementos) de un objeto.",
        "input: Lee una l√≠nea de entrada desde el usuario.",
        "for: Crea un bucle for para iterar sobre una secuencia.",
        "while: Crea un bucle while que se ejecuta mientras se cumple una condici√≥n.",
        "if: Realiza una comprobaci√≥n condicional.",
        "def: Define una funci√≥n.",
        "import: Importa un m√≥dulo o paquete.",
        "exit: Sale del programa.",
    ]
    
    python = "Si inicias en el mundo de la programacion estos comandos te seran de gran ayuda:\n\n" + "\n".join(lista_python)
    await ctx.send(python)
    
@bot.command()
async def contaminacion(ctx):
    contaminar = [
        "En esta seccion encontraras relacion de la actividad humana hacia el mundo natural ",
        "$impacto: Sum√©rgete en la historia de la naturaleza y la Tierra.",
        "$datos: Descubre datos curiosos sobre el mundo natural.",
        "$origen: Descubre la historia de la degradacion de el mundo natural.",
        "$soluciones: Descubre datos curiosos sobre el mundo natural.",
        "$huella: Descubre tu huella de carbono",
        "$contaminacionimages: Descubre los grandes problemas de la contaminacion con imagenes"
        "$importancia: La concientizacion es la forma mas eficiente de erradicar la contaminacion"
    ]
    await ctx.send("\n".join(contaminar))
    
@bot.command()
async def impacto(ctx):
    impacto1 = [
        "Impacto global : La Organizaci√≥n Mundial de la Salud (OMS) estima que la contaminaci√≥n del aire es responsable a nivel mundial de 1.4% de las muertes y del 0.8% de los a√±os de vida",
        "Impacto del aire: Se asocia con un aumento del dioxido de carbono, por ello la exposicion a este se vuelve mortal",
        "Impacto a la distribucion: Es el repentino aumento de contaminantes de acuerdo a la division demografica y la creciente expansion de este conflicto",
        "Impacto en el nacimiento: En el nacimiento existen diversas problematicas que provocan el avance de la contaminacion asi como los altos niveles de sobrepoblacion que se pueden presentar.",
        "Si quieres saber mas sobre el impacto del agua puedes acceder a ello con el mensaje $impactoagua y acceder al impacto de la tierra con $mensajetier"
    ]
    await ctx.send("\n".join(impacto1))
    
@bot.command()
async def datos(ctx):
    datos1 = [
        "Se estima que 9 de cada 10 personas en el mundo respiran aire contaminado. ",
        "La contaminacion del suelo afecta la calidad de los alimentos y el agua.",
        "La produccion de carne contribuye a la contaminaci√≥n del agua y la deforestaci√≥n",
        "$La contaminacion apoya a la degradacion de el mundo natural.",
        "$La contaminacion es un 90% causada por los humanos",
    ]
    await ctx.send("\n".join(datos1))
    

@bot.command()
async def origen(ctx):
    origen1 = [
        "Luces de seguridad y publicidad.",
        "Quema de combustibles f√≥siles, como carbon, petroleo y gas natural.",
        "La produccion de carne contribuye a la contaminaci√≥n del agua y la deforestacion",
        "La contaminacion causada por la creacion de automoviles y medios de transporte.",
        "Se cree que la contaminacion puede estar originada en los inicios de la revolucion industrial",
    ]
    await ctx.send("\n".join(origen1))
    
@bot.command()
async def soluciones(ctx):
    datos1 = [
        "Proteccion del espacio animal ",
        "Gestion adecuada de servicios.",
        "Control de industrias u espacios que generen grandes cantidades de dioxido de carbono",
        "Promover energias naturales.",
        "Utilizacion de paneles solares que contribuyan a la eficiencia energetica y apoye a la ecologia",
    ]
    await ctx.send("\n".join(soluciones))
    
@bot.command()
async def huella(ctx):
    huella1 = [
        "Haz clic en este link para saber mas:",
        "https://calculadora-carbono.climatehero.org/?source=MicrosoftKeywordsLatin&msclkid=d3d6a7c282f917a54f6ec1c9e74a20f8",
    ]
    await ctx.send("\n".join(huella1))
    

@bot.command()
async def importancia(ctx):
    importance = [
        "Proteger la salud: La contaminaci√≥n del aire, el agua y el suelo puede tener efectos graves en la salud humana, incluyendo enfermedades respiratorias, c√°ncer y problemas de salud mental.",
        "Conservar la biodiversidad: La contaminaci√≥n puede afectar a los ecosistemas naturales y la biodiversidad, poniendo en peligro a muchas especies de plantas y animales.",
        "Preservar los recursos naturales: La contaminaci√≥n puede agotar los recursos naturales como el agua dulce y el suelo f√©rtil, lo que afecta la disponibilidad de alimentos y agua potable.",
        "Reducir el impacto del cambio clim√°tico: Al reducir la contaminaci√≥n, podemos disminuir las emisiones de gases de efecto invernadero y mitigar el cambio clim√°tico.",
        "Promover la sostenibilidad: Abordar la contaminaci√≥n es esencial para promover un estilo de vida sostenible y asegurar un futuro saludable para las generaciones futuras.",
    ]    
    await ctx.send("\n".join(importance))
    

@bot.command()
async def chau(ctx):
    byexd = [
        "¬°Hasta luego!",
        "¬°Adi√≥s!",
        "¬°Nos vemos pronto!",
        "¬°Que tengas un buen d√≠a!",
        "¬°Hasta la pr√≥xima!",
        "¬°Adi√≥s, amigo!",
    ]
    await ctx.send(random.choice(byexd))
    
@bot.command()
async def impactoagua(ctx):
    impacto_agua1 = [
        "Impacto en los oceanos: El vertido de productos qu√≠micos, desechos industriales y aguas residuales al mar provoca la contaminaci√≥n del agua y afecta gravemente a los ecosistemas marinos.",
        "Impacto en los rios: La contaminaci√≥n de los r√≠os con productos qu√≠micos, desechos industriales y aguas residuales afecta a la vida acu√°tica y puede tener efectos nocivos en la salud humana.",
        "Impacto en los lagos: La contaminaci√≥n de los lagos con nutrientes y productos qu√≠micos puede provocar la proliferaci√≥n de algas y la muerte de peces, afectando a los ecosistemas acu√°ticos.",
    ]
    await ctx.send("\n".join(impacto_agua1))

@bot.command()
async def impactotier(ctx):
    impacto_tier = [
        "Impacto en el suelo: La contaminaci√≥n del suelo con productos qu√≠micos, desechos industriales y residuos agr√≠colas puede afectar a la fertilidad del suelo y a la salud de las plantas y animales.",
        "Impacto en la agricultura: La contaminaci√≥n del suelo puede afectar a los cultivos y a la calidad de los alimentos, lo que puede tener efectos negativos en la salud humana.",
        "Impacto en los ecosistemas terrestres: La contaminaci√≥n del suelo puede tener efectos nocivos en los ecosistemas terrestres y en la biodiversidad.",
    ]
    await ctx.send("\n".join(impacto_tier))
    
@bot.command()
async def inspiracion(ctx):
    frases = [
        "El √©xito es la suma de peque√±os esfuerzos repetidos d√≠a tras d√≠a.",
        "El √∫nico lugar donde el √©xito viene antes que el trabajo es en el diccionario.",
        "No dejes que lo que no puedes hacer interfiera con lo que puedes hacer.",
        "Cree en ti mismo y en todo lo que eres.",
        "El futuro pertenece a aquellos que creen en la belleza de sus sue√±os.",
    ]
    await ctx.send(random.choice(frases))

@bot.command()
async def chiste(ctx):
    chistes = [
        "¬øPor qu√© los p√°jaros no usan Facebook? ¬°Porque ya tienen Twitter!",
        "¬øQu√© hace una abeja en el gimnasio? ¬°Zum-ba!",
        "¬øC√≥mo se despiden los qu√≠micos? √Åcido un placer.",
        "¬øPor qu√© el libro de matem√°ticas est√° triste? Porque tiene demasiados problemas.",
        "¬øQu√© le dice un jardinero a otro? Disfrutemos mientras podamos.",
    ]
    await ctx.send(random.choice(chistes))

@bot.command()
async def cita(ctx):
    citas = [
        "La vida es lo que pasa mientras est√°s ocupado haciendo otros planes. - John Lennon",
        "El √∫nico modo de hacer un gran trabajo es amar lo que haces. - Steve Jobs",
        "La imaginaci√≥n lo es todo. Es la vista previa de las atracciones de la vida por venir. - Albert Einstein",
        "No cuentes los d√≠as, haz que los d√≠as cuenten. - Muhammad Ali",
        "La educaci√≥n es el arma m√°s poderosa que puedes usar para cambiar el mundo. - Nelson Mandela",
    ]
    await ctx.send(random.choice(citas))

@bot.command()
async def truco(ctx):
    trucos = [
        "Presiona `Ctrl + Shift + T` para reabrir la √∫ltima pesta√±a cerrada en tu navegador.",
        "Usa `Alt + Tab` para cambiar r√°pidamente entre ventanas abiertas en tu PC.",
        "¬øSab√≠as que puedes tomar capturas de pantalla con `Shift + Cmd + 4` en Mac?",
        "En Google Chrome, puedes usar `Ctrl + F` para buscar palabras clave en una p√°gina.",
        "En Windows, `Win + D` minimiza todas las ventanas abiertas para mostrar el escritorio.",
    ]
    await ctx.send(random.choice(trucos))

@bot.command()
async def interesante(ctx):
    datos = [
        "El coraz√≥n humano bombea alrededor de 7,570 litros de sangre cada d√≠a.",
        "La luz tarda aproximadamente 8 minutos y 20 segundos en llegar del Sol a la Tierra.",
        "El Everest crece unos 4 mil√≠metros cada a√±o debido al movimiento tect√≥nico.",
        "La Torre Eiffel puede ser hasta 15 cm m√°s alta durante el verano debido a la expansi√≥n t√©rmica.",
        "Los delfines duermen con un ojo abierto para mantenerse alerta ante posibles peligros.",
    ]
    await ctx.send(random.choice(datos))
    
@bot.command()
async def check(ctx):
    if ctx.message.attachments:
        for attachment in ctx.message.attachments:
            file_name = attachment.filename
            file_url = attachment.url
            await attachment.save(f"./{attachment.filename}")
            await ctx.send(get_class(model_path="./keras_model.h5", labels_path="labels.txt", image_path=f"./{attachment.filename}"))
    else:
        await ctx.send("Olvidaste subir la imagen :(")

bot.run("Este es el lugar para el token")        